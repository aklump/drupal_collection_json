<?php
/**
 * @file
 * Base file for the collection_json module.
 *
 * @defgroup collection_json Collection Json
 * @{
 */
use \AKlump\Http\CollectionJson\Collection;
use \AKlump\Http\CollectionJson\Link;
use \AKlump\Http\CollectionJson\Data;
use \AKlump\Http\CollectionJson\Item;

// Path to the admin settings form
define('COLLECTION_JSON_URL_SETTINGS', 'admin/config/system/collection-json');

/**
 * Include (or return include path to) a collection_json include file(s)
 *
 * @code
 *   'file' => collection_json_include('pages', 2),
 * @endcode
 *
 * @param... string
 *   Any number of include file keys to include
 *   For includes/collection_json.example.inc, set this to: example
 * @param int $action
 *   The final argument, if numeric is one of.  If omitted 1 is the default.
 *   1: include the module(s)
 *   2: return the path relative to the module, e.g., hook_menu()
 *   3: return the complete Drupal path per drupal_get_path()
 *
 * @return string
 *   The path to the FIRST include file requested, but only if $return is set to TRUE
 */
function collection_json_include() {
  $includes = func_get_args();
  if (is_numeric(end($includes))) {
    $action = array_pop($includes);
  }
  else {
    $action = 1;
  }
  if ($action > 1) {
    $module = 'includes/collection_json.' .  reset($includes) . '.inc';
    switch ($action) {
      case 3:
        $module = drupal_get_path('module', 'collection_json') . '/' . $module;
        break;
    }
    return $module;
  }
  reset($includes);
  foreach ($includes as $include_name) {
    module_load_include('inc', 'collection_json', 'includes/collection_json.' . $include_name);
  }
}

// /**
//  * Implements hook_admin_paths().
//  */
// function collection_json_admin_paths() {
//   return array('help/*');
// }

/**
 * Triggered when the REST server request a list of available request parsers.
 *
 * @param array $parsers
 *  An associative array of parser callbacks keyed by mime-type.
 * @return void
 */
function collection_json_rest_server_request_parsers_alter(&$parsers) {
  if (_collection_json_version_gt_3_4()) {
    $parsers['application/vnd.collection+json'] = 'CollectionJSONParserCollectionJSON';
  }
  else {
    $parsers['application/vnd.collection+json'] = 'RESTServerCollectionJSON::parseCollectionJSON';
  }
}


/**
 * Deterimines if module version string $a >= $b.
 *
 * @param  string $a e.g., 7.x-3.3
 * @param  string $b e.g., 7.x-3.4
 *
 * @return bool
 */
function _collection_json_version_compare($a, $b) {
  return version_compare($a, $b, '>=');
}

/**
 * Determines if our services version is >= 7.x-3.4 when the schema changed.
 *
 * Important to use this function because it provides static caching.
 *
 * @return bool
 */
function _collection_json_version_gt_3_4() {
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['result'] = &drupal_static(__FUNCTION__);
  }
  $result = &$drupal_static_fast['result'];
  if (!isset($result)) {
    $info = system_get_info('module', 'rest_server');
    $result = _collection_json_version_compare($info['version'], '7.x-3.4');
  }
  
  return $result;
}

/**
 * Triggered when the REST server request a list of supported response formats.
 *
 * @param array $formatters
 *  An associative array of formatter info arrays keyed by type extension. The
 *  formatter info specifies an array of 'mime types' that corresponds to the
 *  output format; a 'view' class that is a subclass of RESTServerView; and
 *  'view arguments' that should be passed to the view when it is created;
 *  a 'model' can also be specified which the controller then must declare
 *  support for to be able to serve data in that format.
 * @return void
 */
function collection_json_rest_server_response_formatters_alter(&$formatters) {

  // The new format started in 7.x-3.4.
  if (_collection_json_version_gt_3_4()) {

    // Adds our collection_json formatter.
    $formatters['collection_json'] = array(
      'mime types' => array('application/vnd.collection+json'),
      'formatter class' => 'CollectionJSONCollectionJSONFormatter',
    );

    // Set up a formatter than will convert a CollectionJSON object to
    // plain JSON.
    $formatters['json']['formatter class'] = 'CollectionJSONJSONFormatter'; 
  }

  // This is the old format when version was < 7.x-3.4.
  else {
    
    // Adds our collection_json formatter.
    $formatters['collection_json'] = array(
      'mime types' => array('application/vnd.collection+json'),
      'view' => 'RESTServerViewCollectionJSON',
      'view arguments' => array('format' => 'collection_json'),
    );    

    // Set up a formatter than will convert a CollectionJSON object to
    // plain JSON.
    foreach ($formatters as $key => $value) {
      if ($formatters[$key]['view'] === 'RESTServerViewBuiltIn') {
        $formatters[$key]['view'] = 'RESTServerViewCollectionJSON';
        $formatters[$key]['view arguments']['view'] = 'RESTServerViewBuiltIn';
      }
    }
  }
}

/**
 * Load the necessary library files to make classes available
 *
 * Use this whenever you need to instantiate an object.  For classes refer
 * to vendor/AKlump/Http.  For example usage take a look at:
 * includes/RESTServerCollectionJSON.php
 */
function collection_json_load() {
  if (!empty(collection_json_config()->autoload)) {
    module_load_include('php', 'collection_json', 'vendor/autoload');
  }
}

/**
 * Return a config array
 *
 * @return object
 *   - autoload: TRUE if this module should load the classes from it's library.
 */
function collection_json_config() {
  $config = &drupal_static(__FUNCTION__, new \stdClass);
  if (empty($config)) {
    $config->autoload = TRUE;
    drupal_alter('collection_json_config', $config);
  }

  return $config;
}

/**
 * Implements hook_rest_server_execute_errors_alter().
 *
 * Turns errors into collection objects.
 *   - body_data becomes the message
 *   - title is the header_message without the code.
 */
function collection_json_rest_server_execute_errors_alter(&$error_alter_array, $controller, $arguments) {
  $obj = collection_json_new_collection();
  list($code, $title, $message) = _collection_json_parse_error_array($error_alter_array);
  $obj->setError(new \AKlump\Http\CollectionJson\Error($code, $title, $message));
  
  // Change the body from text/html to collection object.
  $error_alter_array['body_data'] = $obj;
}

/**
 * Pull out code, title, message for collection object from error array.
 *
 * @code
 *   list($code, $title, $message) = _collection_json_split_error_string(...
 * @endcode
 *
 * @param  array $error_alter_array
 *
 * @return array
 *   - 0: code int
 *   - 1: title string
 *   - 2: message string If empty and title contains a :, the text to the right
 *   of the title will be used.  Otherwise if empty, the title.
 */
function _collection_json_parse_error_array($error_alter_array) {
  preg_match('/([\d]+)[\s:]*(.+)/', $error_alter_array['header_message'], $matches);

  $code     = (int) (empty($error_alter_array['code']) ? $matches[1] : $error_alter_array['code']);
  $title    = trim($matches[2]);

  if (empty($error_alter_array['body_data'])) {
    preg_match('/(.*:\s)?(.+)/', $title, $matches);
    $message = $matches[2];
    if ($matches[1]) {
      $title = $matches[1];
    }
  }
  else {
    $message = $error_alter_array['body_data'];
  }

  $title = trim($title, ': ');

  // If title and message are the same and we have a colon, then split.
  if ($title === $message && preg_match('/(.*:\s)?(.+)/', $title, $matches)) {
    $title    = $matches[1];
    $message  = $matches[2];
  }
  elseif ($title !== $message && strstr($title, $message)) {
    $title = str_replace($message, '', $title);
  }

  $title    = empty($title) ? $message : $title;

  return array($code, trim($title, ': '), $message);
}

/**
 * Returns a new collection object with the current page as the href
 *
 * @return \AKlump\Http\CollectionJson\Collection
 */
function collection_json_new_collection() {
  collection_json_load();

  return new Collection(url(current_path(), array('absolute' => TRUE)));
}

/**
 * Build an Item based on an entity.
 *
 * @param  string $entity_type E.g. node
 * @param  object $entity      
 * @param  string $uri         
 * @param  array  $params      An optional array of custom params. These can be
 *   used by the hook_alters.
 *
 * @return \AKlump\Http\CollectionJson\Item
 */
function collection_json_entity_item($entity_type, $entity, $uri, $params = array()) {
  module_load_include('inc', 'services', 'services.runtime');
  $href = services_resource_uri(array($uri));
  $item = new \AKlump\Http\CollectionJson\Item($href);

  switch ($entity_type) {
    case 'user':
      $account = $entity;

      // Add the user/123 page link.
      if ($entity_href = entity_uri($entity_type, $entity)) {
        $entity_href = url($entity_href['path'], array('absolute' => TRUE));
        $item->addLink(new Link($entity_href, 'about', 'about', 'link', t('More info')));
      }      

      // Add the avatar link.
      if (isset($account->picture)
        && ($href = file_create_url($account->picture->uri))) {
        $item->addLink(new Link($href, 'icon', 'avatar', 'image', t('User picture for @name', array('@name' => $account->name))));
      }

      $item->addData(new Data('uid', (int) $account->uid, t('User ID')));
      $item->addData(new Data('user', $account->name, t('Username')));
      $item->addData(new Data('mail', $account->mail, t('E-mail address')));
      $item->addData(new Data('roles', (array) $account->roles, t('Roles')));
      $item->addData(new Data('created', (int) $account->created, t('Created')));
      $item->addData(new Data('access', (int) $account->access, t('Last access')));
      if (!empty($account->language)) {
        $item->addData(new Data('language', $account->language, t('Preferred language')));
      }
      if (!empty($account->timezone)) { 
        $item->addData(new Data('timezone', $account->timezone, t('Timezone')));
      }
      break;

    case 'node':
      $node = $entity;
      if (!empty($node->title)) {
        $item->addData(new Data('title', $node->title, t('Title')));
      }
      break;
  }

  

  drupal_alter('collection_json_entity_item', $item, $entity_type, $entity, $params);

  return $item;
}

/**
 * Helper function to build a query data array for a resource/type
 *
 * @param  string $resource_name
 * @param  string $crud_type Should be 'retrieve'||'index'
 *
 * @return array An array of Data objects.
 */
function collection_json_query_data($resource_name, $crud_type) {
  $query_data = array();
  if (!($r = services_get_resources()) || empty($r['cycles']['operations']['retrieve']['args'])) {
    return $data;
  }
  foreach ($r[$resource_name]['operations'][$crud_type]['args'] as $data) {
    if (isset($data['source']['param'])) {
      $default  = array_key_exists('default value', $data) ? $data['default value'] : '';
      $prompt   = isset($data['description']) ? $data['description'] : '';
      $query_data[]   = new \AKlump\Http\CollectionJson\Data($data['source']['param'], $default, $prompt);
    }
  }

  return $query_data;
}

/**
 * Build a Template object based on an entity/bundle
 *
 * @param  string $entity_type
 * @param  string $bundle_name
 * @param  string $context array
 *   Allows passing of arbitraty data to alter hooks.
 *   - user
 *   - node
 *
 * @return \AKlump\Http\CollectionJson\Template
 */
function collection_json_bundle_template($entity_type, $bundle_name, $context = array()) {
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['templates'] = &drupal_static(__FUNCTION__, array());
  }
  $templates = &$drupal_static_fast['templates'];
  if (!isset($templates[$entity_type][$bundle_name])) {
    $templates[$entity_type][$bundle_name] = new \AKlump\Http\CollectionJson\Template();

    switch ($entity_type) {
      case 'user':
        $defaults = array(
          'user' => '',
          'pass' => '',
          'mail' => '',
          'language' => language_default()->language,
          'timezone' => date_default_timezone_get(),
        );
        if (isset($context['user'])) {

          // We want the default 'und' to fill in an empty language.
          if (empty($context['user']->language)) {
            unset($context['user']->language);
          }

          // This will not be passed, ever.
          $context['user']->pass = '';

          $defaults = array(
            'user' => $context['user']->name,
          ) + (array) $context['user'] + $defaults;
        }
        $templates[$entity_type][$bundle_name]->addData(new Data('user', $defaults['user'], t('Username')));
        $templates[$entity_type][$bundle_name]->addData(new Data('pass', $defaults['pass'], t('Password')));
        $templates[$entity_type][$bundle_name]->addData(new Data('mail', $defaults['mail'], t('E-mail address')));
        // $templates[$entity_type][$bundle_name]->addData(new Data('roles', '[]', t('Roles')));
        $templates[$entity_type][$bundle_name]->addData(new Data('language', $defaults['language'], t('Preferred language')));
        $templates[$entity_type][$bundle_name]->addData(new Data('timezone', $defaults['timezone'], t('Timezone')));
        break;
    }

    drupal_alter('collection_json_bundle_template', $templates[$entity_type][$bundle_name], $entity_type, $bundle_name, $context);
  }
  
  return $templates[$entity_type][$bundle_name];
}

/**
 * Delete a node and set a 204 header per collection specs.
 *
 * @see  http://amundsen.com/media-types/collection/format/#general
 *
 * @param  int $nid
 */
function collection_json_node_resource_delete($bundle_type, $nid) {
  if (!($node = node_load($nid)) || $node->type !== $bundle_type) {
    return services_error('Resource not found', 404);
  }
  node_delete($nid);
  if (node_load($nid)) {
    return services_error('Could not delete resource.', 409);
  }
  else {
    drupal_add_http_header('Status', '204 No Content');
  }
}